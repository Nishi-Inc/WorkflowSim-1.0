package org.workflowsim.scheduling;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class IWOSchedulingAlgorithm {
	public static final int ITER_MAX=20;
	
	//The number of jobs
	public static final int JOB_SIZE=10;
	//The number of VMs
	public static final int VM_SIZE=5;
	
	public static final double INIT_VARIANCE=1.0;
	public static final double FINAL_VARIANCE=0.1;
	
	//currently, the target is the sum of the vector equals this number.
	public static final int TARGET = 39;
	
	public static void main(String[] args) {
		IWOSchedulingAlgorithm algorithm = new IWOSchedulingAlgorithm();
		algorithm.run();
	}
	/* The main algorithm,
	 * iterating ITER_MAX times,
	 * and show the best seed at the end.
	 */
	public void run(){
		Colony colony = new Colony();
		colony.randomInit();
		for(int i=1;i<=ITER_MAX;i++){
			System.out.println("Iteration: "+i);
			colony.distributeAndExclude(getVariance(i));
			colony.showWeeds();
		}
		Weed theBest = colony.weeds[0];
		System.out.println(theBest.toString());
	}
	//return the variance value in each iteration
	public double getVariance(int iter){
		int gap = ITER_MAX-iter;
		double x = gap*gap/((double) ITER_MAX*ITER_MAX);
		return x*(INIT_VARIANCE-FINAL_VARIANCE)+FINAL_VARIANCE;
	}
}
class Colony{
	public final int POPULATION_SIZE=10;
	 Weed[] weeds=new Weed[POPULATION_SIZE];
	List<Weed> tempWeeds;
	//randomly generate all the weeds. 
	public void randomInit(){
		for(int i=0;i<POPULATION_SIZE;i++){
			weeds[i] = Weed.newRandomWeed();
		}
	}
	//show all the weeds currently in the colony
	public void showWeeds() {
		for(Weed weed:weeds){
			System.out.println(weed.toString()+" Fitness:"+weed.getFitness());
		}
	}
	/* Every weed try distribute in the colony based on its fitness.
	 * Then the colony will only maintain the first POPULATION_SIZE best weeds.
	 */
	public void distributeAndExclude(double variance) {
		tempWeeds=new ArrayList<>();
		//distribute
		for(Weed weed:weeds){
			for(Weed seed:weed.seeds(variance)){
				tempWeeds.add(seed);
			}
		}
		//exclude
		for(int i=0;i<POPULATION_SIZE;i++){
			weeds[i]=getBest();
		}
	}
	/* get the best weed in tempWeeds,
	 * add it to weeds,
	 * delete it in tempWeeds.
	 */
	public Weed getBest() {
		double maxFit=-1;
		int index=0;
		for(int i=0;i<tempWeeds.size();i++){
			double currentFit=tempWeeds.get(i).getFitness();
			if(currentFit>maxFit){
				index=i;
				maxFit=currentFit;
			}
		}
		Weed result=tempWeeds.get(index);
		tempWeeds.remove(index);
		return result;
	}
}
class Weed{
	double fitness = -1.0;
	int[] vector=new int[IWOSchedulingAlgorithm.JOB_SIZE];
	public Weed(int[] theVector){
		this.vector=theVector;
	}
	/* Since it costs time when calculate fitness,
	 * calculateFitness() will only be called at the first time.
	 */
	public double getFitness(){
		if(fitness<0)
			fitness=calculateFitness();
		return fitness;
	}
	/* This part needs to be changed depending on the specific problem
	 * currently it calculated by the distance between the sum of vector and the target.
	 */
	private double calculateFitness() {
		int sum=0;
		for(int v:vector){
			sum+=v;
		}
		double result = 10 -Math.abs(IWOSchedulingAlgorithm.TARGET-sum)/2;
		return (result<0)?0:result;
	}
	/* generate seeds,
	 * the number of seeds equals the integer part of getFitness().
	 * the result include the original weed.
	 */
	public Weed[] seeds(double variance){
		int n=(int) getFitness();
		Weed[] seeds=new Weed[n+1];
		for(int i=0;i<n;i++){
			seeds[i]=randomSeed(variance);
		}
		seeds[n]=this;
		return seeds;
	}
	/*
	 * generate a seed, the distance from the seed to current weed is 
	 * randomly generated by normally distribution. 
	 */
	private Weed randomSeed(double variance) {
		Random random = new Random();
		int[] vector = new int[IWOSchedulingAlgorithm.JOB_SIZE];
		for(int i=0;i< IWOSchedulingAlgorithm.JOB_SIZE;i++){
			vector[i]=this.vector[i]+(int) (random.nextGaussian()*variance);
		}
		return new Weed(vector);
	}
	/*
	 * a new random weed in the solution space.
	 */
	public static Weed newRandomWeed(){
		int[] vector = new int[IWOSchedulingAlgorithm.JOB_SIZE];
		Random random =new Random();
		for(int i=0;i< IWOSchedulingAlgorithm.JOB_SIZE;i++){
			vector[i]= random.nextInt(IWOSchedulingAlgorithm.VM_SIZE);
		}
		return new Weed(vector);
	}
	@Override
	public String toString() {
		String s="Solution: ";
		for(int v:vector){
			s+=""+v+" ";
		}
		return s;
	}
}
